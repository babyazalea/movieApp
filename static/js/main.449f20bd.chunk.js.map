{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MovieGenres","_ref2","genres","react_default","a","createElement","MoviePoster","_ref3","poster","src","alt","Movie","_ref","title","synopsis","map","y","index","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","state","_callApi","fetch","then","b","json","c","data","movies","catch","err","console","log","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_this","sent","setState","stop","_renderMovies","x","src_Movie","medium_cover_image","this","className","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wUA+CA,SAASA,EAATC,GAA8B,IAARC,EAAQD,EAARC,OAClB,OACIC,EAAAC,EAAAC,cAAA,YAAOH,GAIf,SAASI,EAATC,GAA8B,IAARC,EAAQD,EAARC,OAClB,OACIL,EAAAC,EAAAC,cAAA,OAAKI,IAAKD,EAAQE,IAAI,iBAyBfC,MA3Ef,SAAAC,GAAiD,IAAjCC,EAAiCD,EAAjCC,MAAOL,EAA0BI,EAA1BJ,OAAQN,EAAkBU,EAAlBV,OAAQY,EAAUF,EAAVE,SACnC,OACIX,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACC,EAAD,CAAaE,OAAQA,IACrBL,EAAAC,EAAAC,cAAA,UAAKQ,GACLV,EAAAC,EAAAC,cAAA,SACKH,EAAOa,IAAI,SAACC,EAAEC,GAAH,OAAad,EAAAC,EAAAC,cAACL,EAAD,CAAaE,OAAQc,EAAGE,IAAKD,OAE1Dd,EAAAC,EAAAC,cAAA,SACAF,EAAAC,EAAAC,cAACc,EAAAf,EAAD,CACAgB,KAAQN,EACRO,QAAS,IACTC,SAAW,MACXC,WAAS,EACTC,QAAU,eCgDHC,6MA3DbC,MAAM,KAcNC,SAAW,WACT,OAAOC,MAAM,iEACZC,KAAK,SAAAC,GAAC,OAAIA,EAAEC,SACZF,KAAK,SAAAG,GAAC,OAAIA,EAAEC,KAAKC,SACjBC,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QAG5BG,gCAAa,SAAAC,IAAA,IAAAN,EAAA,OAAAO,EAAArC,EAAAsC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUC,EAAKnB,WADf,OACLO,EADKS,EAAAI,KAEXD,EAAKE,SAAS,CACZd,WAHS,wBAAAS,EAAAM,SAAAT,QAYbU,cAAe,WASb,OARaJ,EAAKpB,MAAMQ,OAAOnB,IAAI,SAACoC,EAAElC,GACpC,OAAOd,EAAAC,EAAAC,cAAC+C,EAAD,CACPvC,MAAOsC,EAAEtC,MACTL,OAAQ2C,EAAEE,mBACVnC,IAAKD,EACLf,OAAQiD,EAAEjD,OACVY,SAAUqC,EAAErC,iGAXdwC,KAAKf,8CAiBL,OACApC,EAAAC,EAAAC,cAAA,OAAKkD,UAAY,OAIbD,KAAK5B,MAAMQ,OAASoB,KAAKJ,gBAAkB,kBApDjCM,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxC,KAAK,SAAAyC,GACjCA,EAAaC","file":"static/js/main.449f20bd.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './Movie.css';\nimport LinesEllipsis from 'react-lines-ellipsis';\n\nfunction Movie({title, poster, genres, synopsis}){\n    return(\n        <div>    \n        <MoviePoster poster={poster}/>\n        <h1>{title}</h1>\n        <p>\n            {genres.map((y,index) => <MovieGenres genres={y} key={index}/>)}\n        </p>\n        <p>\n        <LinesEllipsis\n        text = {synopsis}\n        maxLine ='3'\n        ellipsis = '...'\n        trimRight\n        basedOn = 'letters'\n        />\n        </p>\n        </div>\n    )\n}\n\n// class Movie extends Component{\n//    static propTypes={\n//        title:PropTypes.string.isRequired,\n//        poster:PropTypes.string.isRequired\n//    } \n//    render(){\n//         return (\n//         <div>    \n//         <MoviePoster poster={this.props.poster}/>\n//         <h1>{this.props.title}</h1>\n//         </div>\n//         )\n//     }\n// }\n\n\n/* \ncomponent\n-props : 부모로부터 받아오는 값\n*/\n\nfunction MovieGenres({genres}){\n    return(\n        <span>{genres}</span>\n    )\n}\n\nfunction MoviePoster({poster}){\n    return(\n        <img src={poster} alt=\"Movie Poster\"/>\n    )\n}\n\n//props 객체의 경우 하위(아래의) 컴포넌트로 분리되었을 때에는 실행이 바로 되지 않음.\n//상위 컴포넌트에서 props로 데이터를 호출한 후 하위 컴포넌트에서 활용가능.\n// class MoviePoster extends Component{\n//     static propTypes={\n//         poster:PropTypes.string.isRequired\n//     }\n//     render(){\n        \n//     return <img src={this.props.poster}/>\n//     }\n// }\n\nMovie.propTypes={\n    title:PropTypes.string.isRequired,\n    poster:PropTypes.string.isRequired\n}\n\nMoviePoster.propTypes={\n    poster:PropTypes.string.isRequired\n}\n\nexport default Movie;","import React, { Component } from \"react\";\nimport './App.css';\nimport Movie from './Movie'; // ./ -->현재 폴더\n\n\n\n\nclass App extends Component{\n  state={\n    \n  }\n\n  /*\n  async, await\n\n  fetch로 받아온 데이터와 그걸 처리하는 then을 일일이 지정하지 않고\n  fetch가 실행된 이후 바로 다음 실행구문을 실행하게 해주는 tool\n\n  async:이전 라인의 작업이 끝날 때까지 기다리지 않고 실행될 작업\n  await:해당 기능이 끝나는 것을 기다린 후 실행 후(성공적이든 아니든)에 실행될 작업\n   */\n\n  _callApi = () => { \n    return fetch('https://yts.am/api/v2/list_movies.json?sort_by=download_count')\n    .then(b => b.json())\n    .then(c => c.data.movies)\n    .catch(err => console.log(err))\n  }\n\n  _getMovies = async () => {\n    const movies = await this._callApi();\n    this.setState({\n      movies\n    })\n  }\n\n  componentDidMount(){\n    this._getMovies();\n  }\n\n  //랜더링 function\n  _renderMovies =()=>{\n    const movies=this.state.movies.map((x,index)=>{\n      return <Movie \n      title={x.title} \n      poster={x.medium_cover_image} \n      key={index} \n      genres={x.genres}\n      synopsis={x.synopsis}/>\n    });\n    return movies;\n  }\n\n  render(){\n    return (\n    <div className = \"App\">\n      {\n        //this.state.movies가 있을 땐 _renderMovies 실행\n        //state가 비어있는 상황엔 loading...문구\n        this.state.movies ? this._renderMovies() : 'Loading'\n      }\n    </div>\n    )\n  }//render\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}